// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: midterm.proto

package Midterm

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ColorDetector_GetCoordinate_FullMethodName = "/Midterm.ColorDetector/getCoordinate"
)

// ColorDetectorClient is the client API for ColorDetector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ColorDetectorClient interface {
	GetCoordinate(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Coordinate, error)
}

type colorDetectorClient struct {
	cc grpc.ClientConnInterface
}

func NewColorDetectorClient(cc grpc.ClientConnInterface) ColorDetectorClient {
	return &colorDetectorClient{cc}
}

func (c *colorDetectorClient) GetCoordinate(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Coordinate, error) {
	out := new(Coordinate)
	err := c.cc.Invoke(ctx, ColorDetector_GetCoordinate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ColorDetectorServer is the server API for ColorDetector service.
// All implementations must embed UnimplementedColorDetectorServer
// for forward compatibility
type ColorDetectorServer interface {
	GetCoordinate(context.Context, *empty.Empty) (*Coordinate, error)
	mustEmbedUnimplementedColorDetectorServer()
}

// UnimplementedColorDetectorServer must be embedded to have forward compatible implementations.
type UnimplementedColorDetectorServer struct {
}

func (UnimplementedColorDetectorServer) GetCoordinate(context.Context, *empty.Empty) (*Coordinate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoordinate not implemented")
}
func (UnimplementedColorDetectorServer) mustEmbedUnimplementedColorDetectorServer() {}

// UnsafeColorDetectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ColorDetectorServer will
// result in compilation errors.
type UnsafeColorDetectorServer interface {
	mustEmbedUnimplementedColorDetectorServer()
}

func RegisterColorDetectorServer(s grpc.ServiceRegistrar, srv ColorDetectorServer) {
	s.RegisterService(&ColorDetector_ServiceDesc, srv)
}

func _ColorDetector_GetCoordinate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ColorDetectorServer).GetCoordinate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ColorDetector_GetCoordinate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ColorDetectorServer).GetCoordinate(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ColorDetector_ServiceDesc is the grpc.ServiceDesc for ColorDetector service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ColorDetector_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Midterm.ColorDetector",
	HandlerType: (*ColorDetectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getCoordinate",
			Handler:    _ColorDetector_GetCoordinate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "midterm.proto",
}
